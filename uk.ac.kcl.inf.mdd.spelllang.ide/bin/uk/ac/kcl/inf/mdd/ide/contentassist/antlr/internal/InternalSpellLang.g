/*
 * generated by Xtext 2.33.0
 */
grammar InternalSpellLang;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package uk.ac.kcl.inf.mdd.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package uk.ac.kcl.inf.mdd.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import uk.ac.kcl.inf.mdd.services.SpellLangGrammarAccess;

}
@parser::members {
	private SpellLangGrammarAccess grammarAccess;

	public void setGrammarAccess(SpellLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSpellDefinition
entryRuleSpellDefinition
:
{ before(grammarAccess.getSpellDefinitionRule()); }
	 ruleSpellDefinition
{ after(grammarAccess.getSpellDefinitionRule()); } 
	 EOF 
;

// Rule SpellDefinition
ruleSpellDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSpellDefinitionAccess().getGroup()); }
		(rule__SpellDefinition__Group__0)
		{ after(grammarAccess.getSpellDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSpellExpression
entryRuleSpellExpression
:
{ before(grammarAccess.getSpellExpressionRule()); }
	 ruleSpellExpression
{ after(grammarAccess.getSpellExpressionRule()); } 
	 EOF 
;

// Rule SpellExpression
ruleSpellExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSpellExpressionAccess().getGroup()); }
		(rule__SpellExpression__Group__0)
		{ after(grammarAccess.getSpellExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSimpleSpell
entryRuleSimpleSpell
:
{ before(grammarAccess.getSimpleSpellRule()); }
	 ruleSimpleSpell
{ after(grammarAccess.getSimpleSpellRule()); } 
	 EOF 
;

// Rule SimpleSpell
ruleSimpleSpell 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSimpleSpellAccess().getAlternatives()); }
		(rule__SimpleSpell__Alternatives)
		{ after(grammarAccess.getSimpleSpellAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSay
entryRuleSay
:
{ before(grammarAccess.getSayRule()); }
	 ruleSay
{ after(grammarAccess.getSayRule()); } 
	 EOF 
;

// Rule Say
ruleSay 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSayAccess().getGroup()); }
		(rule__Say__Group__0)
		{ after(grammarAccess.getSayAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMove
entryRuleMove
:
{ before(grammarAccess.getMoveRule()); }
	 ruleMove
{ after(grammarAccess.getMoveRule()); } 
	 EOF 
;

// Rule Move
ruleMove 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMoveAccess().getGroup()); }
		(rule__Move__Group__0)
		{ after(grammarAccess.getMoveAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSpellInvocation
entryRuleSpellInvocation
:
{ before(grammarAccess.getSpellInvocationRule()); }
	 ruleSpellInvocation
{ after(grammarAccess.getSpellInvocationRule()); } 
	 EOF 
;

// Rule SpellInvocation
ruleSpellInvocation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSpellInvocationAccess().getGroup()); }
		(rule__SpellInvocation__Group__0)
		{ after(grammarAccess.getSpellInvocationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Movement
ruleMovement
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMovementAccess().getAlternatives()); }
		(rule__Movement__Alternatives)
		{ after(grammarAccess.getMovementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSpell__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleSpellAccess().getSayParserRuleCall_0()); }
		ruleSay
		{ after(grammarAccess.getSimpleSpellAccess().getSayParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleSpellAccess().getMoveParserRuleCall_1()); }
		ruleMove
		{ after(grammarAccess.getSimpleSpellAccess().getMoveParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Movement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMovementAccess().getUpEnumLiteralDeclaration_0()); }
		('up')
		{ after(grammarAccess.getMovementAccess().getUpEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getMovementAccess().getDownEnumLiteralDeclaration_1()); }
		('down')
		{ after(grammarAccess.getMovementAccess().getDownEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getMovementAccess().getLeftEnumLiteralDeclaration_2()); }
		('left')
		{ after(grammarAccess.getMovementAccess().getLeftEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getMovementAccess().getRightEnumLiteralDeclaration_3()); }
		('right')
		{ after(grammarAccess.getMovementAccess().getRightEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getModelAccess().getSpellsAssignment_0()); }
		(rule__Model__SpellsAssignment_0)
		{ after(grammarAccess.getModelAccess().getSpellsAssignment_0()); }
	)
	(
		{ before(grammarAccess.getModelAccess().getSpellsAssignment_0()); }
		(rule__Model__SpellsAssignment_0)*
		{ after(grammarAccess.getModelAccess().getSpellsAssignment_0()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getModelAccess().getSessionAssignment_1()); }
		(rule__Model__SessionAssignment_1)
		{ after(grammarAccess.getModelAccess().getSessionAssignment_1()); }
	)
	(
		{ before(grammarAccess.getModelAccess().getSessionAssignment_1()); }
		(rule__Model__SessionAssignment_1)*
		{ after(grammarAccess.getModelAccess().getSessionAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SpellDefinition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpellDefinition__Group__0__Impl
	rule__SpellDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellDefinition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpellDefinitionAccess().getNameAssignment_0()); }
	(rule__SpellDefinition__NameAssignment_0)
	{ after(grammarAccess.getSpellDefinitionAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellDefinition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpellDefinition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellDefinition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpellDefinitionAccess().getSpellCodeAssignment_1()); }
	(rule__SpellDefinition__SpellCodeAssignment_1)
	{ after(grammarAccess.getSpellDefinitionAccess().getSpellCodeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SpellExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpellExpression__Group__0__Impl
	rule__SpellExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpellExpressionAccess().getSimpleSpellParserRuleCall_0()); }
	ruleSimpleSpell
	{ after(grammarAccess.getSpellExpressionAccess().getSimpleSpellParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpellExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpellExpressionAccess().getGroup_1()); }
	(rule__SpellExpression__Group_1__0)*
	{ after(grammarAccess.getSpellExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SpellExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpellExpression__Group_1__0__Impl
	rule__SpellExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpellExpressionAccess().getComplexSpellStartAction_1_0()); }
	()
	{ after(grammarAccess.getSpellExpressionAccess().getComplexSpellStartAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpellExpression__Group_1__1__Impl
	rule__SpellExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpellExpressionAccess().getThenKeyword_1_1()); }
	'then'
	{ after(grammarAccess.getSpellExpressionAccess().getThenKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpellExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpellExpressionAccess().getNextAssignment_1_2()); }
	(rule__SpellExpression__NextAssignment_1_2)
	{ after(grammarAccess.getSpellExpressionAccess().getNextAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Say__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Say__Group__0__Impl
	rule__Say__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Say__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSayAccess().getSayKeyword_0()); }
	'say'
	{ after(grammarAccess.getSayAccess().getSayKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Say__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Say__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Say__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSayAccess().getWordAssignment_1()); }
	(rule__Say__WordAssignment_1)
	{ after(grammarAccess.getSayAccess().getWordAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Move__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Move__Group__0__Impl
	rule__Move__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveAccess().getMoveKeyword_0()); }
	'move'
	{ after(grammarAccess.getMoveAccess().getMoveKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Move__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveAccess().getMovementAssignment_1()); }
	(rule__Move__MovementAssignment_1)
	{ after(grammarAccess.getMoveAccess().getMovementAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SpellInvocation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpellInvocation__Group__0__Impl
	rule__SpellInvocation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellInvocation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpellInvocationAccess().getInvokeKeyword_0()); }
	'invoke'
	{ after(grammarAccess.getSpellInvocationAccess().getInvokeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellInvocation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpellInvocation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellInvocation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpellInvocationAccess().getSpellAssignment_1()); }
	(rule__SpellInvocation__SpellAssignment_1)
	{ after(grammarAccess.getSpellInvocationAccess().getSpellAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__SpellsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getSpellsSpellDefinitionParserRuleCall_0_0()); }
		ruleSpellDefinition
		{ after(grammarAccess.getModelAccess().getSpellsSpellDefinitionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__SessionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getSessionSpellInvocationParserRuleCall_1_0()); }
		ruleSpellInvocation
		{ after(grammarAccess.getModelAccess().getSessionSpellInvocationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellDefinition__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSpellDefinitionAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getSpellDefinitionAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellDefinition__SpellCodeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSpellDefinitionAccess().getSpellCodeSpellExpressionParserRuleCall_1_0()); }
		ruleSpellExpression
		{ after(grammarAccess.getSpellDefinitionAccess().getSpellCodeSpellExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellExpression__NextAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSpellExpressionAccess().getNextSimpleSpellParserRuleCall_1_2_0()); }
		ruleSimpleSpell
		{ after(grammarAccess.getSpellExpressionAccess().getNextSimpleSpellParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Say__WordAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSayAccess().getWordIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getSayAccess().getWordIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__MovementAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMoveAccess().getMovementMovementEnumRuleCall_1_0()); }
		ruleMovement
		{ after(grammarAccess.getMoveAccess().getMovementMovementEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellInvocation__SpellAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSpellInvocationAccess().getSpellSpellDefinitionCrossReference_1_0()); }
		(
			{ before(grammarAccess.getSpellInvocationAccess().getSpellSpellDefinitionIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getSpellInvocationAccess().getSpellSpellDefinitionIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getSpellInvocationAccess().getSpellSpellDefinitionCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
