/*
 * generated by Xtext 2.33.0
 */
package uk.ac.kcl.inf.mdd.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import uk.ac.kcl.inf.mdd.ide.contentassist.antlr.internal.InternalSpellLangParser;
import uk.ac.kcl.inf.mdd.services.SpellLangGrammarAccess;

public class SpellLangParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SpellLangGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SpellLangGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getSimpleSpellAccess().getAlternatives(), "rule__SimpleSpell__Alternatives");
			builder.put(grammarAccess.getMovementAccess().getAlternatives(), "rule__Movement__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getSpellDefinitionAccess().getGroup(), "rule__SpellDefinition__Group__0");
			builder.put(grammarAccess.getSpellExpressionAccess().getGroup(), "rule__SpellExpression__Group__0");
			builder.put(grammarAccess.getSpellExpressionAccess().getGroup_1(), "rule__SpellExpression__Group_1__0");
			builder.put(grammarAccess.getSayAccess().getGroup(), "rule__Say__Group__0");
			builder.put(grammarAccess.getMoveAccess().getGroup(), "rule__Move__Group__0");
			builder.put(grammarAccess.getSpellInvocationAccess().getGroup(), "rule__SpellInvocation__Group__0");
			builder.put(grammarAccess.getModelAccess().getSpellsAssignment_0(), "rule__Model__SpellsAssignment_0");
			builder.put(grammarAccess.getModelAccess().getSessionAssignment_1(), "rule__Model__SessionAssignment_1");
			builder.put(grammarAccess.getSpellDefinitionAccess().getNameAssignment_0(), "rule__SpellDefinition__NameAssignment_0");
			builder.put(grammarAccess.getSpellDefinitionAccess().getSpellCodeAssignment_1(), "rule__SpellDefinition__SpellCodeAssignment_1");
			builder.put(grammarAccess.getSpellExpressionAccess().getNextAssignment_1_2(), "rule__SpellExpression__NextAssignment_1_2");
			builder.put(grammarAccess.getSayAccess().getWordAssignment_1(), "rule__Say__WordAssignment_1");
			builder.put(grammarAccess.getMoveAccess().getMovementAssignment_1(), "rule__Move__MovementAssignment_1");
			builder.put(grammarAccess.getSpellInvocationAccess().getSpellAssignment_1(), "rule__SpellInvocation__SpellAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SpellLangGrammarAccess grammarAccess;

	@Override
	protected InternalSpellLangParser createParser() {
		InternalSpellLangParser result = new InternalSpellLangParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SpellLangGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SpellLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
