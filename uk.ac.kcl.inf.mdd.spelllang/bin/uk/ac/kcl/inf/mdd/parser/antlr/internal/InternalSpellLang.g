/*
 * generated by Xtext 2.33.0
 */
grammar InternalSpellLang;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package uk.ac.kcl.inf.mdd.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uk.ac.kcl.inf.mdd.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import uk.ac.kcl.inf.mdd.services.SpellLangGrammarAccess;

}

@parser::members {

 	private SpellLangGrammarAccess grammarAccess;

    public InternalSpellLangParser(TokenStream input, SpellLangGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected SpellLangGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getSpellsSpellDefinitionParserRuleCall_0_0());
				}
				lv_spells_0_0=ruleSpellDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"spells",
						lv_spells_0_0,
						"uk.ac.kcl.inf.mdd.SpellLang.SpellDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getSessionSpellInvocationParserRuleCall_1_0());
				}
				lv_session_1_0=ruleSpellInvocation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"session",
						lv_session_1_0,
						"uk.ac.kcl.inf.mdd.SpellLang.SpellInvocation");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleSpellDefinition
entryRuleSpellDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSpellDefinitionRule()); }
	iv_ruleSpellDefinition=ruleSpellDefinition
	{ $current=$iv_ruleSpellDefinition.current; }
	EOF;

// Rule SpellDefinition
ruleSpellDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getSpellDefinitionAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSpellDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSpellDefinitionAccess().getSpellCodeSpellExpressionParserRuleCall_1_0());
				}
				lv_spellCode_1_0=ruleSpellExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSpellDefinitionRule());
					}
					set(
						$current,
						"spellCode",
						lv_spellCode_1_0,
						"uk.ac.kcl.inf.mdd.SpellLang.SpellExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSpellExpression
entryRuleSpellExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSpellExpressionRule()); }
	iv_ruleSpellExpression=ruleSpellExpression
	{ $current=$iv_ruleSpellExpression.current; }
	EOF;

// Rule SpellExpression
ruleSpellExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSpellExpressionAccess().getSimpleSpellParserRuleCall_0());
		}
		this_SimpleSpell_0=ruleSimpleSpell
		{
			$current = $this_SimpleSpell_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getSpellExpressionAccess().getComplexSpellStartAction_1_0(),
						$current);
				}
			)
			otherlv_2='then'
			{
				newLeafNode(otherlv_2, grammarAccess.getSpellExpressionAccess().getThenKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSpellExpressionAccess().getNextSimpleSpellParserRuleCall_1_2_0());
					}
					lv_next_3_0=ruleSimpleSpell
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSpellExpressionRule());
						}
						add(
							$current,
							"next",
							lv_next_3_0,
							"uk.ac.kcl.inf.mdd.SpellLang.SimpleSpell");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSimpleSpell
entryRuleSimpleSpell returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleSpellRule()); }
	iv_ruleSimpleSpell=ruleSimpleSpell
	{ $current=$iv_ruleSimpleSpell.current; }
	EOF;

// Rule SimpleSpell
ruleSimpleSpell returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSimpleSpellAccess().getSayParserRuleCall_0());
		}
		this_Say_0=ruleSay
		{
			$current = $this_Say_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSimpleSpellAccess().getMoveParserRuleCall_1());
		}
		this_Move_1=ruleMove
		{
			$current = $this_Move_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSay
entryRuleSay returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSayRule()); }
	iv_ruleSay=ruleSay
	{ $current=$iv_ruleSay.current; }
	EOF;

// Rule Say
ruleSay returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='say'
		{
			newLeafNode(otherlv_0, grammarAccess.getSayAccess().getSayKeyword_0());
		}
		(
			(
				lv_word_1_0=RULE_ID
				{
					newLeafNode(lv_word_1_0, grammarAccess.getSayAccess().getWordIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSayRule());
					}
					setWithLastConsumed(
						$current,
						"word",
						lv_word_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleMove
entryRuleMove returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMoveRule()); }
	iv_ruleMove=ruleMove
	{ $current=$iv_ruleMove.current; }
	EOF;

// Rule Move
ruleMove returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='move'
		{
			newLeafNode(otherlv_0, grammarAccess.getMoveAccess().getMoveKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMoveAccess().getMovementMovementEnumRuleCall_1_0());
				}
				lv_movement_1_0=ruleMovement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMoveRule());
					}
					set(
						$current,
						"movement",
						lv_movement_1_0,
						"uk.ac.kcl.inf.mdd.SpellLang.Movement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSpellInvocation
entryRuleSpellInvocation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSpellInvocationRule()); }
	iv_ruleSpellInvocation=ruleSpellInvocation
	{ $current=$iv_ruleSpellInvocation.current; }
	EOF;

// Rule SpellInvocation
ruleSpellInvocation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='invoke'
		{
			newLeafNode(otherlv_0, grammarAccess.getSpellInvocationAccess().getInvokeKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSpellInvocationRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getSpellInvocationAccess().getSpellSpellDefinitionCrossReference_1_0());
				}
			)
		)
	)
;

// Rule Movement
ruleMovement returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='up'
			{
				$current = grammarAccess.getMovementAccess().getUpEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMovementAccess().getUpEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='down'
			{
				$current = grammarAccess.getMovementAccess().getDownEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMovementAccess().getDownEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='left'
			{
				$current = grammarAccess.getMovementAccess().getLeftEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getMovementAccess().getLeftEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='right'
			{
				$current = grammarAccess.getMovementAccess().getRightEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getMovementAccess().getRightEnumLiteralDeclaration_3());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
