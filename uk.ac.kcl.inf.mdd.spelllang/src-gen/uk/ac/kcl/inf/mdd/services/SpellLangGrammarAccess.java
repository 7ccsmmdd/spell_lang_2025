/*
 * generated by Xtext 2.33.0
 */
package uk.ac.kcl.inf.mdd.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SpellLangGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.SpellLang.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSpellsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSpellsSpellDefinitionParserRuleCall_0_0 = (RuleCall)cSpellsAssignment_0.eContents().get(0);
		private final Assignment cSessionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSessionSpellInvocationParserRuleCall_1_0 = (RuleCall)cSessionAssignment_1.eContents().get(0);
		
		//Model:
		//    spells += SpellDefinition+
		//    session += SpellInvocation+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//spells += SpellDefinition+
		//session += SpellInvocation+
		public Group getGroup() { return cGroup; }
		
		//spells += SpellDefinition+
		public Assignment getSpellsAssignment_0() { return cSpellsAssignment_0; }
		
		//SpellDefinition
		public RuleCall getSpellsSpellDefinitionParserRuleCall_0_0() { return cSpellsSpellDefinitionParserRuleCall_0_0; }
		
		//session += SpellInvocation+
		public Assignment getSessionAssignment_1() { return cSessionAssignment_1; }
		
		//SpellInvocation
		public RuleCall getSessionSpellInvocationParserRuleCall_1_0() { return cSessionSpellInvocationParserRuleCall_1_0; }
	}
	public class SpellDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.SpellLang.SpellDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cSpellCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSpellCodeSpellExpressionParserRuleCall_1_0 = (RuleCall)cSpellCodeAssignment_1.eContents().get(0);
		
		//SpellDefinition:
		//    name = ID spellCode = SpellExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = ID spellCode = SpellExpression
		public Group getGroup() { return cGroup; }
		
		//name = ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//spellCode = SpellExpression
		public Assignment getSpellCodeAssignment_1() { return cSpellCodeAssignment_1; }
		
		//SpellExpression
		public RuleCall getSpellCodeSpellExpressionParserRuleCall_1_0() { return cSpellCodeSpellExpressionParserRuleCall_1_0; }
	}
	public class SpellExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.SpellLang.SpellExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSimpleSpellParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComplexSpellStartAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cThenKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNextAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNextSimpleSpellParserRuleCall_1_2_0 = (RuleCall)cNextAssignment_1_2.eContents().get(0);
		
		//SpellExpression:
		//    SimpleSpell ({ComplexSpell.start = current} 'then' next += SimpleSpell)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleSpell ({ComplexSpell.start = current} 'then' next += SimpleSpell)*
		public Group getGroup() { return cGroup; }
		
		//SimpleSpell
		public RuleCall getSimpleSpellParserRuleCall_0() { return cSimpleSpellParserRuleCall_0; }
		
		//({ComplexSpell.start = current} 'then' next += SimpleSpell)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ComplexSpell.start = current}
		public Action getComplexSpellStartAction_1_0() { return cComplexSpellStartAction_1_0; }
		
		//'then'
		public Keyword getThenKeyword_1_1() { return cThenKeyword_1_1; }
		
		//next += SimpleSpell
		public Assignment getNextAssignment_1_2() { return cNextAssignment_1_2; }
		
		//SimpleSpell
		public RuleCall getNextSimpleSpellParserRuleCall_1_2_0() { return cNextSimpleSpellParserRuleCall_1_2_0; }
	}
	public class SimpleSpellElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.SpellLang.SimpleSpell");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSayParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMoveParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SimpleSpell:
		//    Say | Move
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Say | Move
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Say
		public RuleCall getSayParserRuleCall_0() { return cSayParserRuleCall_0; }
		
		//Move
		public RuleCall getMoveParserRuleCall_1() { return cMoveParserRuleCall_1; }
	}
	public class SayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.SpellLang.Say");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSayKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWordAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWordIDTerminalRuleCall_1_0 = (RuleCall)cWordAssignment_1.eContents().get(0);
		
		//Say:
		//    'say' word=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'say' word=ID
		public Group getGroup() { return cGroup; }
		
		//'say'
		public Keyword getSayKeyword_0() { return cSayKeyword_0; }
		
		//word=ID
		public Assignment getWordAssignment_1() { return cWordAssignment_1; }
		
		//ID
		public RuleCall getWordIDTerminalRuleCall_1_0() { return cWordIDTerminalRuleCall_1_0; }
	}
	public class MoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.SpellLang.Move");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMoveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMovementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMovementMovementEnumRuleCall_1_0 = (RuleCall)cMovementAssignment_1.eContents().get(0);
		
		//Move:
		//    'move' movement=Movement
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'move' movement=Movement
		public Group getGroup() { return cGroup; }
		
		//'move'
		public Keyword getMoveKeyword_0() { return cMoveKeyword_0; }
		
		//movement=Movement
		public Assignment getMovementAssignment_1() { return cMovementAssignment_1; }
		
		//Movement
		public RuleCall getMovementMovementEnumRuleCall_1_0() { return cMovementMovementEnumRuleCall_1_0; }
	}
	public class SpellInvocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.SpellLang.SpellInvocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInvokeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSpellAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSpellSpellDefinitionCrossReference_1_0 = (CrossReference)cSpellAssignment_1.eContents().get(0);
		private final RuleCall cSpellSpellDefinitionIDTerminalRuleCall_1_0_1 = (RuleCall)cSpellSpellDefinitionCrossReference_1_0.eContents().get(1);
		
		//SpellInvocation:
		//    'invoke' spell=[SpellDefinition]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'invoke' spell=[SpellDefinition]
		public Group getGroup() { return cGroup; }
		
		//'invoke'
		public Keyword getInvokeKeyword_0() { return cInvokeKeyword_0; }
		
		//spell=[SpellDefinition]
		public Assignment getSpellAssignment_1() { return cSpellAssignment_1; }
		
		//[SpellDefinition]
		public CrossReference getSpellSpellDefinitionCrossReference_1_0() { return cSpellSpellDefinitionCrossReference_1_0; }
		
		//ID
		public RuleCall getSpellSpellDefinitionIDTerminalRuleCall_1_0_1() { return cSpellSpellDefinitionIDTerminalRuleCall_1_0_1; }
	}
	
	public class MovementElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.SpellLang.Movement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUpEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUpUpKeyword_0_0 = (Keyword)cUpEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDownEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDownDownKeyword_1_0 = (Keyword)cDownEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLeftEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLeftLeftKeyword_2_0 = (Keyword)cLeftEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cRightEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cRightRightKeyword_3_0 = (Keyword)cRightEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Movement:
		//    up | down | left | right
		//;
		public EnumRule getRule() { return rule; }
		
		//up | down | left | right
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//up
		public EnumLiteralDeclaration getUpEnumLiteralDeclaration_0() { return cUpEnumLiteralDeclaration_0; }
		
		public Keyword getUpUpKeyword_0_0() { return cUpUpKeyword_0_0; }
		
		//down
		public EnumLiteralDeclaration getDownEnumLiteralDeclaration_1() { return cDownEnumLiteralDeclaration_1; }
		
		public Keyword getDownDownKeyword_1_0() { return cDownDownKeyword_1_0; }
		
		//left
		public EnumLiteralDeclaration getLeftEnumLiteralDeclaration_2() { return cLeftEnumLiteralDeclaration_2; }
		
		public Keyword getLeftLeftKeyword_2_0() { return cLeftLeftKeyword_2_0; }
		
		//right
		public EnumLiteralDeclaration getRightEnumLiteralDeclaration_3() { return cRightEnumLiteralDeclaration_3; }
		
		public Keyword getRightRightKeyword_3_0() { return cRightRightKeyword_3_0; }
	}
	
	private final ModelElements pModel;
	private final SpellDefinitionElements pSpellDefinition;
	private final SpellExpressionElements pSpellExpression;
	private final SimpleSpellElements pSimpleSpell;
	private final SayElements pSay;
	private final MoveElements pMove;
	private final MovementElements eMovement;
	private final SpellInvocationElements pSpellInvocation;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SpellLangGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pSpellDefinition = new SpellDefinitionElements();
		this.pSpellExpression = new SpellExpressionElements();
		this.pSimpleSpell = new SimpleSpellElements();
		this.pSay = new SayElements();
		this.pMove = new MoveElements();
		this.eMovement = new MovementElements();
		this.pSpellInvocation = new SpellInvocationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.inf.mdd.SpellLang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    spells += SpellDefinition+
	//    session += SpellInvocation+
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//SpellDefinition:
	//    name = ID spellCode = SpellExpression
	//;
	public SpellDefinitionElements getSpellDefinitionAccess() {
		return pSpellDefinition;
	}
	
	public ParserRule getSpellDefinitionRule() {
		return getSpellDefinitionAccess().getRule();
	}
	
	//SpellExpression:
	//    SimpleSpell ({ComplexSpell.start = current} 'then' next += SimpleSpell)*
	//;
	public SpellExpressionElements getSpellExpressionAccess() {
		return pSpellExpression;
	}
	
	public ParserRule getSpellExpressionRule() {
		return getSpellExpressionAccess().getRule();
	}
	
	//SimpleSpell:
	//    Say | Move
	//;
	public SimpleSpellElements getSimpleSpellAccess() {
		return pSimpleSpell;
	}
	
	public ParserRule getSimpleSpellRule() {
		return getSimpleSpellAccess().getRule();
	}
	
	//Say:
	//    'say' word=ID
	//;
	public SayElements getSayAccess() {
		return pSay;
	}
	
	public ParserRule getSayRule() {
		return getSayAccess().getRule();
	}
	
	//Move:
	//    'move' movement=Movement
	//;
	public MoveElements getMoveAccess() {
		return pMove;
	}
	
	public ParserRule getMoveRule() {
		return getMoveAccess().getRule();
	}
	
	//enum Movement:
	//    up | down | left | right
	//;
	public MovementElements getMovementAccess() {
		return eMovement;
	}
	
	public EnumRule getMovementRule() {
		return getMovementAccess().getRule();
	}
	
	//SpellInvocation:
	//    'invoke' spell=[SpellDefinition]
	//;
	public SpellInvocationElements getSpellInvocationAccess() {
		return pSpellInvocation;
	}
	
	public ParserRule getSpellInvocationRule() {
		return getSpellInvocationAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
