/**
 * generated by Xtext 2.33.0
 */
package uk.ac.kcl.inf.mdd.spellLang.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import uk.ac.kcl.inf.mdd.spellLang.Model;
import uk.ac.kcl.inf.mdd.spellLang.SpellDefinition;
import uk.ac.kcl.inf.mdd.spellLang.SpellInvocation;
import uk.ac.kcl.inf.mdd.spellLang.SpellLangPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.mdd.spellLang.impl.ModelImpl#getSpells <em>Spells</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.mdd.spellLang.impl.ModelImpl#getSession <em>Session</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ModelImpl extends MinimalEObjectImpl.Container implements Model
{
  /**
   * The cached value of the '{@link #getSpells() <em>Spells</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSpells()
   * @generated
   * @ordered
   */
  protected EList<SpellDefinition> spells;

  /**
   * The cached value of the '{@link #getSession() <em>Session</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSession()
   * @generated
   * @ordered
   */
  protected EList<SpellInvocation> session;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SpellLangPackage.Literals.MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<SpellDefinition> getSpells()
  {
    if (spells == null)
    {
      spells = new EObjectContainmentEList<SpellDefinition>(SpellDefinition.class, this, SpellLangPackage.MODEL__SPELLS);
    }
    return spells;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<SpellInvocation> getSession()
  {
    if (session == null)
    {
      session = new EObjectContainmentEList<SpellInvocation>(SpellInvocation.class, this, SpellLangPackage.MODEL__SESSION);
    }
    return session;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SpellLangPackage.MODEL__SPELLS:
        return ((InternalEList<?>)getSpells()).basicRemove(otherEnd, msgs);
      case SpellLangPackage.MODEL__SESSION:
        return ((InternalEList<?>)getSession()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SpellLangPackage.MODEL__SPELLS:
        return getSpells();
      case SpellLangPackage.MODEL__SESSION:
        return getSession();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SpellLangPackage.MODEL__SPELLS:
        getSpells().clear();
        getSpells().addAll((Collection<? extends SpellDefinition>)newValue);
        return;
      case SpellLangPackage.MODEL__SESSION:
        getSession().clear();
        getSession().addAll((Collection<? extends SpellInvocation>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SpellLangPackage.MODEL__SPELLS:
        getSpells().clear();
        return;
      case SpellLangPackage.MODEL__SESSION:
        getSession().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SpellLangPackage.MODEL__SPELLS:
        return spells != null && !spells.isEmpty();
      case SpellLangPackage.MODEL__SESSION:
        return session != null && !session.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ModelImpl
