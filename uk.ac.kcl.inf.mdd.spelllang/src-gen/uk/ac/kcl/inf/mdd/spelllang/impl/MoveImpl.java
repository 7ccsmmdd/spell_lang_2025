/**
 * generated by Xtext 2.33.0
 */
package uk.ac.kcl.inf.mdd.spellLang.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import uk.ac.kcl.inf.mdd.spellLang.Move;
import uk.ac.kcl.inf.mdd.spellLang.Movement;
import uk.ac.kcl.inf.mdd.spellLang.SpellLangPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Move</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.mdd.spellLang.impl.MoveImpl#getMovement <em>Movement</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MoveImpl extends SimpleSpellImpl implements Move
{
  /**
   * The default value of the '{@link #getMovement() <em>Movement</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMovement()
   * @generated
   * @ordered
   */
  protected static final Movement MOVEMENT_EDEFAULT = Movement.UP;

  /**
   * The cached value of the '{@link #getMovement() <em>Movement</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMovement()
   * @generated
   * @ordered
   */
  protected Movement movement = MOVEMENT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MoveImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SpellLangPackage.Literals.MOVE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Movement getMovement()
  {
    return movement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMovement(Movement newMovement)
  {
    Movement oldMovement = movement;
    movement = newMovement == null ? MOVEMENT_EDEFAULT : newMovement;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpellLangPackage.MOVE__MOVEMENT, oldMovement, movement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SpellLangPackage.MOVE__MOVEMENT:
        return getMovement();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SpellLangPackage.MOVE__MOVEMENT:
        setMovement((Movement)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SpellLangPackage.MOVE__MOVEMENT:
        setMovement(MOVEMENT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SpellLangPackage.MOVE__MOVEMENT:
        return movement != MOVEMENT_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (movement: ");
    result.append(movement);
    result.append(')');
    return result.toString();
  }

} //MoveImpl
