/**
 * generated by Xtext 2.33.0
 */
package uk.ac.kcl.inf.mdd.spellLang.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import uk.ac.kcl.inf.mdd.spellLang.SpellDefinition;
import uk.ac.kcl.inf.mdd.spellLang.SpellInvocation;
import uk.ac.kcl.inf.mdd.spellLang.SpellLangPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Spell Invocation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.mdd.spellLang.impl.SpellInvocationImpl#getSpell <em>Spell</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SpellInvocationImpl extends MinimalEObjectImpl.Container implements SpellInvocation
{
  /**
   * The cached value of the '{@link #getSpell() <em>Spell</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSpell()
   * @generated
   * @ordered
   */
  protected SpellDefinition spell;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SpellInvocationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SpellLangPackage.Literals.SPELL_INVOCATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SpellDefinition getSpell()
  {
    if (spell != null && spell.eIsProxy())
    {
      InternalEObject oldSpell = (InternalEObject)spell;
      spell = (SpellDefinition)eResolveProxy(oldSpell);
      if (spell != oldSpell)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, SpellLangPackage.SPELL_INVOCATION__SPELL, oldSpell, spell));
      }
    }
    return spell;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SpellDefinition basicGetSpell()
  {
    return spell;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSpell(SpellDefinition newSpell)
  {
    SpellDefinition oldSpell = spell;
    spell = newSpell;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpellLangPackage.SPELL_INVOCATION__SPELL, oldSpell, spell));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SpellLangPackage.SPELL_INVOCATION__SPELL:
        if (resolve) return getSpell();
        return basicGetSpell();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SpellLangPackage.SPELL_INVOCATION__SPELL:
        setSpell((SpellDefinition)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SpellLangPackage.SPELL_INVOCATION__SPELL:
        setSpell((SpellDefinition)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SpellLangPackage.SPELL_INVOCATION__SPELL:
        return spell != null;
    }
    return super.eIsSet(featureID);
  }

} //SpellInvocationImpl
