/**
 * generated by Xtext 2.33.0
 */
package uk.ac.kcl.inf.mdd.spellLang.impl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import uk.ac.kcl.inf.mdd.spellLang.ComplexSpell;
import uk.ac.kcl.inf.mdd.spellLang.Model;
import uk.ac.kcl.inf.mdd.spellLang.Move;
import uk.ac.kcl.inf.mdd.spellLang.Movement;
import uk.ac.kcl.inf.mdd.spellLang.Say;
import uk.ac.kcl.inf.mdd.spellLang.SimpleSpell;
import uk.ac.kcl.inf.mdd.spellLang.SpellDefinition;
import uk.ac.kcl.inf.mdd.spellLang.SpellExpression;
import uk.ac.kcl.inf.mdd.spellLang.SpellInvocation;
import uk.ac.kcl.inf.mdd.spellLang.SpellLangFactory;
import uk.ac.kcl.inf.mdd.spellLang.SpellLangPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SpellLangPackageImpl extends EPackageImpl implements SpellLangPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass modelEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass spellDefinitionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass spellExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass simpleSpellEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass sayEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass moveEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass spellInvocationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass complexSpellEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum movementEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see uk.ac.kcl.inf.mdd.spellLang.SpellLangPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private SpellLangPackageImpl()
  {
    super(eNS_URI, SpellLangFactory.eINSTANCE);
  }
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link SpellLangPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static SpellLangPackage init()
  {
    if (isInited) return (SpellLangPackage)EPackage.Registry.INSTANCE.getEPackage(SpellLangPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredSpellLangPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    SpellLangPackageImpl theSpellLangPackage = registeredSpellLangPackage instanceof SpellLangPackageImpl ? (SpellLangPackageImpl)registeredSpellLangPackage : new SpellLangPackageImpl();

    isInited = true;

    // Create package meta-data objects
    theSpellLangPackage.createPackageContents();

    // Initialize created meta-data
    theSpellLangPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theSpellLangPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(SpellLangPackage.eNS_URI, theSpellLangPackage);
    return theSpellLangPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getModel()
  {
    return modelEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getModel_Spells()
  {
    return (EReference)modelEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getModel_Session()
  {
    return (EReference)modelEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSpellDefinition()
  {
    return spellDefinitionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSpellDefinition_Name()
  {
    return (EAttribute)spellDefinitionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSpellDefinition_SpellCode()
  {
    return (EReference)spellDefinitionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSpellExpression()
  {
    return spellExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSimpleSpell()
  {
    return simpleSpellEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSay()
  {
    return sayEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSay_Word()
  {
    return (EAttribute)sayEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMove()
  {
    return moveEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMove_Movement()
  {
    return (EAttribute)moveEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSpellInvocation()
  {
    return spellInvocationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSpellInvocation_Spell()
  {
    return (EReference)spellInvocationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getComplexSpell()
  {
    return complexSpellEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getComplexSpell_Start()
  {
    return (EReference)complexSpellEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getComplexSpell_Next()
  {
    return (EReference)complexSpellEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getMovement()
  {
    return movementEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SpellLangFactory getSpellLangFactory()
  {
    return (SpellLangFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    modelEClass = createEClass(MODEL);
    createEReference(modelEClass, MODEL__SPELLS);
    createEReference(modelEClass, MODEL__SESSION);

    spellDefinitionEClass = createEClass(SPELL_DEFINITION);
    createEAttribute(spellDefinitionEClass, SPELL_DEFINITION__NAME);
    createEReference(spellDefinitionEClass, SPELL_DEFINITION__SPELL_CODE);

    spellExpressionEClass = createEClass(SPELL_EXPRESSION);

    simpleSpellEClass = createEClass(SIMPLE_SPELL);

    sayEClass = createEClass(SAY);
    createEAttribute(sayEClass, SAY__WORD);

    moveEClass = createEClass(MOVE);
    createEAttribute(moveEClass, MOVE__MOVEMENT);

    spellInvocationEClass = createEClass(SPELL_INVOCATION);
    createEReference(spellInvocationEClass, SPELL_INVOCATION__SPELL);

    complexSpellEClass = createEClass(COMPLEX_SPELL);
    createEReference(complexSpellEClass, COMPLEX_SPELL__START);
    createEReference(complexSpellEClass, COMPLEX_SPELL__NEXT);

    // Create enums
    movementEEnum = createEEnum(MOVEMENT);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    simpleSpellEClass.getESuperTypes().add(this.getSpellExpression());
    sayEClass.getESuperTypes().add(this.getSimpleSpell());
    moveEClass.getESuperTypes().add(this.getSimpleSpell());
    complexSpellEClass.getESuperTypes().add(this.getSpellExpression());

    // Initialize classes and features; add operations and parameters
    initEClass(modelEClass, Model.class, "Model", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getModel_Spells(), this.getSpellDefinition(), null, "spells", null, 0, -1, Model.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getModel_Session(), this.getSpellInvocation(), null, "session", null, 0, -1, Model.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(spellDefinitionEClass, SpellDefinition.class, "SpellDefinition", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSpellDefinition_Name(), ecorePackage.getEString(), "name", null, 0, 1, SpellDefinition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSpellDefinition_SpellCode(), this.getSpellExpression(), null, "spellCode", null, 0, 1, SpellDefinition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(spellExpressionEClass, SpellExpression.class, "SpellExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(simpleSpellEClass, SimpleSpell.class, "SimpleSpell", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(sayEClass, Say.class, "Say", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSay_Word(), ecorePackage.getEString(), "word", null, 0, 1, Say.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(moveEClass, Move.class, "Move", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMove_Movement(), this.getMovement(), "movement", null, 0, 1, Move.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(spellInvocationEClass, SpellInvocation.class, "SpellInvocation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSpellInvocation_Spell(), this.getSpellDefinition(), null, "spell", null, 0, 1, SpellInvocation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(complexSpellEClass, ComplexSpell.class, "ComplexSpell", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getComplexSpell_Start(), this.getSpellExpression(), null, "start", null, 0, 1, ComplexSpell.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getComplexSpell_Next(), this.getSimpleSpell(), null, "next", null, 0, -1, ComplexSpell.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Initialize enums and add enum literals
    initEEnum(movementEEnum, Movement.class, "Movement");
    addEEnumLiteral(movementEEnum, Movement.UP);
    addEEnumLiteral(movementEEnum, Movement.DOWN);
    addEEnumLiteral(movementEEnum, Movement.LEFT);
    addEEnumLiteral(movementEEnum, Movement.RIGHT);

    // Create resource
    createResource(eNS_URI);
  }

} //SpellLangPackageImpl
